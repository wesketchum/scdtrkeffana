#include "services_microboone.fcl"
#include "singles_microboone.fcl"
#include "largeantmodules_microboone.fcl"
#include "mcreco.fcl"
#include "detsimmodules_microboone.fcl"
#include "triggersim_microboone.fcl"
#include "opticaldetectorsim_microboone.fcl"
#include "caldata_microboone.fcl"
#include "hitfindermodules_microboone.fcl"
#include "cluster_microboone.fcl"
#include "opticaldetectormodules_microboone.fcl"
#include "triggeralgo_service.fcl"

process_name: SingleMuons

services:
{
  scheduler:    { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "single_hist_uboone.root" }
  Timing:       {}
  SimpleMemoryCheck:     { ignoreTotal: 1 } # default is one
  RandomNumberGenerator: {} #ART native random number generator
#  FileCatalogMetadata:  @local::art_file_catalog_mc
  #user:         @local::microboone_simulation_services
                           @table::microboone_simulation_services
}
services.DatabaseUtil.ShouldConnect: false

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   10          # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {

   generator: @local::microboone_singlep
   largeant: @local::microboone_largeant
   mcreco:   @local::standard_mcreco
   optdigitizer:   @local::microboone_optical_adc_sim
   optfem:         @local::microboone_optical_fem_sim
   triggersim:     @local::ubtrigger_standard
   pmtreadout:     @local::microboone_optical_dram_readout_sim
   daq:            @local::microboone_simwire

   opflash          : @local::microboone_opflash_beam_highgain
   opflashLow       : @local::microboone_opflash_beam_lowgain
   opflashCosmic    : @local::microboone_opflash_cosmic_highgain
   opflashCosmicLow : @local::microboone_opflash_cosmic_lowgain

   caldata:             @local::microboone_calroi
   gaushit:             @local::microboone_gaushitfinder

   rns:       { module_type: "RandomNumberSaver" }
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ rns, generator, largeant, mcreco, optdigitizer, optfem, triggersim, pmtreadout, daq ]
 reco:     [ opflash, caldata, gaushit ]

 simandreco: [ rns, generator, largeant, mcreco, optdigitizer, optfem, triggersim, pmtreadout, daq, opflash, caldata, gaushit ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [ simandreco ] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "single_gen_uboone.root"
   dataTier:    "generated"
   compressionLevel: 1
 }
}

outputs.out1.fileName: "prod_muminus_0.1-2.0GeV_isotropic_uboone_%tc_gen.root"

physics.producers.generator.PDG: [ 13 ]            # mu-
physics.producers.generator.PosDist: 0             # Flat position dist.
physics.producers.generator.X0: [ 128.0 ]
physics.producers.generator.Y0: [ 0.0 ]
physics.producers.generator.Z0: [ 518.5 ]
physics.producers.generator.T0: [ 800.0 ]
physics.producers.generator.SigmaX: [ 128.0 ]      # x = (0, 256)
physics.producers.generator.SigmaY: [ 116.5 ]      # y = (-116.5, 116.5)
physics.producers.generator.SigmaZ: [ 518.5 ]      # z = (0, 1037)
physics.producers.generator.SigmaT: [ 800.0 ]        # In time
physics.producers.generator.PDist: 0               # Flat momentum dist. (0.1-2.0 GeV)
physics.producers.generator.P0: [ 1.05 ]
physics.producers.generator.SigmaP: [ 0.95 ]
physics.producers.generator.AngleDist: 0           # Flat angle dist.
physics.producers.generator.Theta0XZ: [ 0. ]       # y-azimuth
physics.producers.generator.Theta0YZ: [ 0. ]       # y-latitude
physics.producers.generator.SigmaThetaXZ: [ 180. ] # Quasi-isotropic
physics.producers.generator.SigmaThetaYZ: [ 90. ]

physics.producers.largeant.KeepParticlesInVolumes: ["volCryostat"] #only keep MCParticles that cross the cryostat

physics.producers.triggersim:   @local::ubtrigger_singlep
physics.producers.optdigitizer: @local::microboone_optical_adc_sim_singlep
physics.producers.optfem:       @local::microboone_optical_fem_sim_singlep

physics.producers.caldata.DigitModuleLabel:                     "daq"

physics.producers.caldata.DoBaselineSub:                        false
physics.producers.caldata.DoBaselineSub_WaveformPropertiesAlg:  true

physics.producers.gaushit.CalDataModuleLabel:                   "caldata"
